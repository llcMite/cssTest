1.页面布局：
解决方案有以下五种：
1.浮动float，
2.绝对定位 position:absoluted
3.flex解决方案：display：flex； flex：1；
4.table表格布局：display：table； display：table-cell；
5.grid网格布局：display：grid；width：100%； grid-tempelate-rows：
100px；grid-tempelate-columns：300px auto 300px；grid-row：auto；

2.css盒子模型
标准模型：margin（外边距）、padding（内边距）、content（内容）、border（边框）
IE模型：

3.DOM结构
1.DOM级别
DOM0:element.onclick=function(){}
DOM2:element.addElementListener('click',function(){},false)
DOM3:element.addElementListener('keyup',function(){},false)
2.DOM事件模型：捕获-》冒泡-》目标阶段
3.DOM事件流事件：通过捕获到目标元素，再从目标元素上传递windows对象的过程
4.描述DOM事件捕获的具体流程
捕获是从上往下捕获的
由window-document-html-body-...目标元素
5.Event对象的常见运用
event.preventDefault()阻止默认事件
event.stoppropagation()阻止冒泡
event.currentTarget当前被绑定的元素
event.target当前被点击的元素
6.自定义事件

4.类型转换：
 数据类型，最新的ECMAScript标准定义了七种数据类型
 原始类型：Boolean Null Undefined Number String Symbol(es6新增加的)
 对象：Object ）
 显示类型转换：
 1.Number函数：
 原始类型转换：
 （数值-数值，字符串-如果可以被解析为数值就为数值，否则得到NAN，空字符串为0；布尔值-true转1，false转0;undefined-NAN;
 null-0)
对象类型转换：

2.String函数：
原始类型转换：
 （数值-字符串，字符串-字符串；布尔值-true转true，false转false;undefined-undefined;null-null）

对象类型转换：
  先调用toString方法，如果toString方法返回的是原始类型的值，则对该值使用String方法，
  如果toString方法返回的值是复合类型的值，则需再调用valueOf的方法，如果valueOf方法返回的是原始类型的值，则对该值使用String方法

3.Boolean函数：
原始类型转换：（undefined、null、-0、+0、NAN 、' '(空字符串)）-》false；其他的都为true；
对象类型转换：
先调用该对象的valueOf的方法，如果valueOf方法返回的是原始类型的值，则运用上面两条规则，否则则继续调用该对象的toString方法

隐式类型转换：
什么时候会触发隐式类型转换
四则运算
判断语句
Native调用
隐式类型转换其实和显示类型转换一样

类型转换：
常见题目：
[]+[]
[]+{}
{}+[]
{}+{}
true+true
1+{a:1}

HTTP协议的主要特点：简单快速、无连接、无状态、灵活
HTTP报文的组成部分：1.请求报文：请求行、请求头、空行、请求体；2.响应报文：状态、响应头、空行、响应体

HTTP方法：get-获取资源、post-传输资源、put-更新资源、delete-删除资源、head-获取报文首部
post和get的区别：
1.get在浏览器中回退是无害的，post会再次提交申请
2.get参数通过url传递，post放在Request body中
3.get请求会被浏览器主动缓存，而post不会，除非手动设置
4.get请求在url中传送的参数是有长度限制一般在2k左右，而post没有限制
5.get请求会被完整的保留在浏览器记录中，而post不会
HTTP状态码：
1xx:指示信息-表示请求已接收，继续处理
2xx:成功-表示请求被成功接收
3xx:重定向-完成请求必须进行更进一步操作
4xx:客户端错误-请求有语法错误或者无法实现
5xx:服务器错误-服务器未能实现合法请求
什么是持久连接：
只有http1.1以上的版本才有
只要使用持久连接进行过一次客户端到服务端的连接，那么客户端到服务端的连接就持久有效
什么是管线化：
在持久连接的基础上，把请求一次打包，一次传输，然后服务端也把这些请求一次响应回来


原型链：
创建对象有几种方法
一.字面量、object对象
var o1={name:'o1'};
var o11=new Object({name:'o11'});
二通过构造函数
var M=function(){this.name='o2'};
var o2=new M();
三Object.create
var P={name:'o3'};
var o3=Object.create(P)

原型链：
创建对象有几种方法
一.字面量、object对象
var o1={name:'o1'};
var o11=new Object({name:'o11'});
二通过构造函数
var M=function(){this.name='o2'};
var o2=new M();
三Object.create
var P={name:'o3'};
var o3=Object.create(P)

原型对象：
构造函数：
实例：
原型链：从一个实例对象往上找构造这个实例相关联的对象，这个相关联的对象往上找又有创造他的上一级原型对象，
以此类推，一直到object.prototype终止


面向对象：


通信类：
安全类：
CSRF:跨站请求伪造，英文名Cross-site request forgery
攻击原理：（大白话） 攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的
防御措施：1.Token验证；2.Referer（页面来源）验证；3.隐藏令牌
XSS:cross-size scripting跨域脚本攻击--XSS反射型攻击、XSS存储型攻击
攻击原理：向页面注入脚本
防御措施：1.表单提交或者url参数传递前，对需要的参数进行过滤,；2.过滤用户输入的 检查用户输入的内容中是否有非法内容。